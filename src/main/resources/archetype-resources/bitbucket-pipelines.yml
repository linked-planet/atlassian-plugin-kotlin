# snapshots will deploy from Bitbucket pipelines artifacts, because we are not able to get the
# exact Snapshot jar with the correct timestamp from Artifactory
# -> Bitbucket pipelines artifacts are only stored for 14 days however
deploy-script-test: &deploy-script-test
  script:
    - SNAPSHOT_FILE=$(find target -maxdepth 1 -name "*-*.*.*-SNAPSHOT.jar")
    - sh pipelines/deploy.sh "" $SNAPSHOT_FILE


steps:
  - build: &build
      name: Build
      caches:
        - mvn-build
      script:
        - mkdir -p $HOME/.m2 && cp pipelines/settings.xml $HOME/.m2
        - mvn -B clean deploy
          -DaltReleaseDeploymentRepository=artifactory::$ARTIFACTORY_CONTEXT_URL/libs-release-local
          -DaltSnapshotDeploymentRepository=artifactory::$ARTIFACTORY_CONTEXT_URL/libs-snapshot-local
          -Ddeveloper.connection=scm:git:$BITBUCKET_GIT_HTTP_ORIGIN
          -Pci
      artifacts:
        - target/*-*.*.*-SNAPSHOT.jar

  - deploy-test-manual: &deploy-test-manual
      name: Deploy Test
      deployment: Test
      trigger: manual
      caches:
        - mvn-deploy
      <<: *deploy-script-test

  - deploy-test-auto: &deploy-test-auto
      name: Deploy Test
      deployment: Test
      caches:
        - mvn-deploy
      <<: *deploy-script-test


definitions:
  caches:
    mvn-build: $HOME/.m2/repository
    mvn-deploy: $HOME/.m2/repository


image: linkedplanet/docker-build-kotlin-fullstack:latest

# note: deployment to production is only possible via release pipeline
pipelines:

  default:
    - step: *build
    - step: *deploy-test-manual

  custom:
    release:
      - variables:
          - name: VERSION
      - step:
          name: Build and Release
          caches:
            - mvn-build
          script:
            - apt update && apt install -y git
            - mkdir -p $HOME/.m2 && cp pipelines/settings.xml $HOME/.m2
            - sh pipelines/release.sh $VERSION
      # release pipeline will upload the artifact to artifactory and download it from there for deployment
      # -> the artifact is available indefinitely, so deployments can be re-triggered in the future
      - step:
          name: Deploy Test
          deployment: Test
          caches:
            - mvn-deploy
          script:
            - sh pipelines/deploy.sh $VERSION
      - step:
          name: Deploy Production
          deployment: Prod
          trigger: manual
          caches:
            - mvn-deploy
          script:
            - sh pipelines/deploy.sh $VERSION
